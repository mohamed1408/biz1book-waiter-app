import { Order } from '../types'

const neworder = (options: any) => {
    var order: Order = {
        Id: 0,
        AggregatorOrderId: 0,
        AllItemDisc: 0,
        AllItemTaxDisc: 0,
        AllItemTotalDisc: 0,
        BillAmount: 0,
        BillDate: '',
        BillDateTime: '',
        BillStatusId: 0,
        ChargeJson: '',
        Charges: 0,
        Closed: false,
        CompanyId: 0,
        CustomerAddressId: 0,
        CustomerData: '',
        CustomerId: 0,
        CustomerDetails: {
            Id: 0,
            Name: '',
            Email: '',
            PhoneNo: '',
            Address: '',
            City: '',
            PostalCode: 0,
            googlemapurl: '',
            CompanyId: 0,
            StoreId: 0,
            Sync: 0,
            val: 0
        },
        DeliveryDateTime: '',
        DiningTableId: options.tableid,
        DiscAmount: 0,
        DiscPercent: 0,
        DiscType: 0,
        FoodReady: false,
        InvoiceNo: '',
        IsAdvanceOrder: [3, 4].includes(options.typeid) ? true : false,
        ItemJson: '',
        Items: [],
        KOTS: [],
        ModifiedDate: '',
        Note: '',
        OrderDiscount: 0,
        OrderedDate: '',
        OrderedDateTime: '',
        OrderJson: '',
        OrderNo: 0,
        OrderId: 0,
        OrderStatusDetails: '',
        OrderStatusId: 0,
        OrderTaxDisc: 0,
        OrderTotDisc: 0,
        OrderTypeId: 0,
        OrderName: '',
        PaidAmount: 0,
        PreviousStatusId: 0,
        RefundAmount: 0,
        RiderStatusDetails: '',
        Source: '',
        SourceId: 1,
        SplitTableId: 0,
        StorePaymentTypeId: 0,
        PaymentTypeId: 0,
        StoreId: 0,
        Tax1: 0,
        Tax2: 0,
        Tax3: 0,
        UPOrderId: 0,
        UserId: 0,
        WaiterId: 0,
        TaxAmount: 0,
        additionalchargearray: [],
        subtotal: 0,
        extra: 0,
        events: [],
        datastatus: '',
        status: '',
        Transactions: [],
        istaxinclusive: false,
        changeditems: [],
        diningtablekey: options.tabekey,
        isordersaved: false,
        deliverytimestamp: 0,
        DeliveryStoreId: 0,
        createdtimestamp: new Date().getTime(),
        deliveryclicked: false,
        alltransactions: [],
        appversion: '0.1.0',
        UserName: options.username,
        app: 'waiterapp'
    };
    return order
}

export default {
    neworder: (options: any) => neworder(options),
};